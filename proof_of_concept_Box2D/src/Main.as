package{	import proximity.box2d.bodies.Obstacle;	import Box2D.Common.Math.b2Vec2;	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2DebugDraw;	import Box2D.Dynamics.b2World;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.ui.Keyboard;	import proximity.box2d.bodies.Boundries;	import proximity.box2d.bodies.Box;	import proximity.box2d.bodies.Magnet;	import proximity.box2d.events.ContactListener;	import proximity.box2d.math.pixelsToMeters;	import proximity.model.GameState;	import proximity.model.Physics;	public class Main extends MovieClip	{		public var tf:TextField;		private var _world:b2World;		private var _state:GameState;		private var _trash:Vector.<b2Body> = new Vector.<b2Body>();		public function Main()		{			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			_state = new GameState();			setupWorld();			configureRendering();			configureListeners();		}		private function setupWorld():void		{			_world = new b2World(new b2Vec2(0, 0), true);			_world.SetContactListener(new ContactListener(this));			new Boundries(_world).create(stage.stageWidth, stage.stageHeight);			addBoxes();			addObstacles();		}		private function addBoxes():void		{			new Box(_world).create(new Rectangle(pixelsToMeters(Math.random() * stage.stageWidth), pixelsToMeters(Math.random() * stage.stageHeight), .5, .5)).withUserData({"name":"smallBox" + _state.uniqueID++, "magnetic":true});			new Box(_world).create(new Rectangle(pixelsToMeters(Math.random() * stage.stageWidth), pixelsToMeters(Math.random() * stage.stageHeight), 1, 1)).withUserData({"name":"largeBox" + _state.uniqueID++, "magnetic":true});		}		private function addObstacles():void		{			new Obstacle(_world).create(new Rectangle(pixelsToMeters(Math.random() * stage.stageWidth), pixelsToMeters(Math.random() * stage.stageHeight), 2, .5)).withUserData({"name":"obstacle" + _state.uniqueID++, "magnetic":false});			new Obstacle(_world).create(new Rectangle(pixelsToMeters(Math.random() * stage.stageWidth), pixelsToMeters(Math.random() * stage.stageHeight), 3, .5)).withUserData({"name":"obstacle" + _state.uniqueID++, "magnetic":false});		}				private function configureRendering():void		{			var debugSprite:Sprite = addChild(new Sprite()) as Sprite;			var debugDraw:b2DebugDraw = new b2DebugDraw();			debugDraw.SetSprite(debugSprite);			debugDraw.SetDrawScale(32);			debugDraw.SetLineThickness(1.0);			debugDraw.SetAlpha(1);			debugDraw.SetFillAlpha(0.4);			debugDraw.SetFlags(b2DebugDraw.e_shapeBit);			_world.SetDebugDraw(debugDraw);		}		private function configureListeners():void		{			stage.addEventListener(Event.ENTER_FRAME, onEnterFrame, false, 0, true);			stage.addEventListener(MouseEvent.CLICK, onMouseClick, false, 0, true);			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);		}		private function onKeyDown(event:KeyboardEvent):void		{			switch(event.keyCode)			{				case Keyboard.UP:					_state.magnetMass += .25;					trace(_state.magnetMass);					wakeUpAllMagneticBodies();					break;				case Keyboard.DOWN:					_state.magnetMass -= .25;					trace(_state.magnetMass);					wakeUpAllMagneticBodies();					break;				case Keyboard.SPACE:					addBoxes();					break;			}		}		private function onMouseClick(event:MouseEvent):void		{			if (event.target === stage)			{				if (_state.magnet == null)				{					_state.magnet = new Magnet(_world).create(event.stageX, event.stageY).withUserData({"name":"magnet"}).body;				}				else				{					_state.magnet.SetPosition(new b2Vec2(pixelsToMeters(event.stageX), pixelsToMeters(event.stageY)));				}				wakeUpAllMagneticBodies();			}		}		private function wakeUpAllMagneticBodies():void		{			for (var bb:b2Body = _world.GetBodyList();bb;bb = bb.GetNext())			{				if (bb.GetUserData() != null && (bb.GetUserData() as Object).hasOwnProperty("magnetic") && (bb.GetUserData() as Object)["magnetic"])				{					bb.SetAwake(true);				}			}		}		private function flagForDeletion(body:b2Body):void		{			for (var i:int = 0, l:uint = _trash.length; i < l; i++)			{				if (_trash[i] === body)				{					return;				}			}			_trash.push(body);		}		public function onMagnetHit(body:b2Body):void		{			flagForDeletion(body);		}		public function onEnterFrame(e:Event):void		{			var i:uint, l:uint;			if (_state.magnet != null)			{				for (var bb:b2Body = _world.GetBodyList();bb;bb = bb.GetNext())				{					if (bb.GetUserData() != null && (bb.GetUserData() as Object).hasOwnProperty("magnetic") && (bb.GetUserData() as Object)["magnetic"])					{						magnetize(bb);					}				}			}			_world.Step(Physics.B2_TIMESTEP, Physics.B2_VELOCITY_ITERATIONS, Physics.B2_POSITION_ITERATIONS);			_world.ClearForces();			_world.DrawDebugData();			// Empty trash			for (i = 0, l = _trash.length; i < l; i++)			{				_world.DestroyBody(_trash[i]);			}		}		private function magnetize(body:b2Body):Number		{			_state.magnetizeForce = _state.magnetMass * (Physics.MAX_MASS - body.GetMass()) / _state.distanceToMagnet.inMeters(_state.magnet, body);			tf.text = _state.magnetizeForce.toString();			if (_state.magnetizeForce < Physics.MIN_FORCE) return 0;			if (_state.magnetizeForce > Physics.MAX_FORCE) _state.magnetizeForce = Physics.MAX_FORCE;			_state.magnetizeAngle = Math.atan2(_state.magnet.GetPosition().y - body.GetPosition().y, _state.magnet.GetPosition().x - body.GetPosition().x);			_state.magnetizeVelocity.x = _state.magnetizeForce * Math.cos(_state.magnetizeAngle);			_state.magnetizeVelocity.y = _state.magnetizeForce * Math.sin(_state.magnetizeAngle);			body.SetLinearVelocity(_state.magnetizeVelocity);			return _state.magnetizeForce;		}	}}